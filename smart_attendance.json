[
    {
        "id": "6b13ac8835e1a8dd",
        "type": "tab",
        "label": "db_mysql",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1845049c0e0b030c",
        "type": "group",
        "z": "6b13ac8835e1a8dd",
        "name": "Register new staff",
        "style": {
            "stroke": "#000000",
            "fill": "#ffbfbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "83a42ecb7093007c",
            "04ac2c5ec192a876",
            "ff0699e253647a60",
            "6cabb21c944cbf4d",
            "0ba040695f5c0e89",
            "c34aee0bfb8dd42b",
            "e6b0093e50e08ffe",
            "19dcde6414157bf2",
            "4acc66664627aa2c",
            "13b52024fee46387",
            "6c69980c7ed93170",
            "555074e764b58a85",
            "9b76d02f56668318",
            "8568d761288ec384",
            "aa0e333476f5151f",
            "e9afb809165cfdf6",
            "010020511b6c1b15",
            "aab87556ee8c9a1d",
            "6f4425dd062d113f"
        ],
        "x": 34,
        "y": 39,
        "w": 1342,
        "h": 242
    },
    {
        "id": "8b744031c4387e1c",
        "type": "group",
        "z": "6b13ac8835e1a8dd",
        "name": "Scan in",
        "style": {
            "stroke": "#000000",
            "fill": "#ffefbf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "fc624bd440cbcd43",
            "a31ef3ec9be8b217",
            "f39a4eebc3301c47",
            "f3adab6956141cf0",
            "4fdffab18ceef923",
            "3f7c1f3c6ebb6dc4",
            "8f8ec9d703e71d94",
            "fecbf34efaad7d6e",
            "ce81b0db067a48c4",
            "b2be051e9eb366d4",
            "aed6ae56c8608f6c",
            "82e737939a498e33",
            "e97cced72279351d",
            "79dae5bb959e0fcf",
            "b1cebc246c0a75fa",
            "9547209e3c1c317e",
            "8d0934fbda507848",
            "417fa87ad413272a",
            "7f6fe61fb4b66c39",
            "ad2b16f6636f859a",
            "aee0786b973dd81e",
            "39cb7b0107ea1e2a",
            "86eece8e450ff7a2",
            "bc47b8b4c3f695f3",
            "5e9b60de4712f285",
            "9cafcdfd3e28ba81",
            "1be7d8ac50623006"
        ],
        "x": 34,
        "y": 299,
        "w": 1472,
        "h": 302
    },
    {
        "id": "9134ff1e8f4df087",
        "type": "group",
        "z": "6b13ac8835e1a8dd",
        "name": "Display",
        "style": {
            "label": true,
            "stroke": "#000000",
            "fill": "#bfdbef",
            "color": "#000000"
        },
        "nodes": [
            "6cfb32b6ac44195b",
            "e702800bd9cff3aa",
            "17b0bba30bd8670c",
            "5d5efbce5c25aa0f",
            "fc754e82ce3fc643",
            "7795bf2fcce5f5e1",
            "92cb811959aeca37",
            "3fe55a434aad7218",
            "656211924f28a659",
            "f333e31bbdeb0771",
            "e98c5407facc8e18",
            "db2b95baaaf50a15",
            "43fc31be07c5aeec",
            "7b4cf30cc6d0320a",
            "095250e7439768d3"
        ],
        "x": 34,
        "y": 979,
        "w": 542,
        "h": 362
    },
    {
        "id": "scanout_group",
        "type": "group",
        "z": "6b13ac8835e1a8dd",
        "name": "Scan Out with TS Matching & Update",
        "style": {
            "label": true,
            "fill": "#ffefbf",
            "stroke": "#000000",
            "color": "#000000"
        },
        "nodes": [
            "inject_fathin",
            "fn_record_ts_out",
            "fn_read_staff_db",
            "mysql_read_staff",
            "fn_verify_uid",
            "fn_find_latest_scanin",
            "mysql_find_latest_scanin",
            "fn_store_latest_match",
            "fn_update_scanout",
            "mysql_update_scanout",
            "fn_log_success",
            "mysql_log_action",
            "c1459a3a31e4c977",
            "eb535990dfb7bb1a",
            "96f3339a44ed79a8",
            "9d15662afb868cf8",
            "453940467f4285fa",
            "c46e44161c9e2122",
            "235232c7ff124104",
            "2096cd7829661f60",
            "4cef8fa9c205a652",
            "d7dad9b7b37f5ed8",
            "f6890b555e13af2d",
            "f6ecf9d705c46b22",
            "937245df9628f493",
            "df43b3800daa7956"
        ],
        "x": 34,
        "y": 619,
        "w": 1202,
        "h": 342
    },
    {
        "id": "094a935373be984b",
        "type": "group",
        "z": "6b13ac8835e1a8dd",
        "name": "Employee Skills Update",
        "style": {
            "label": true,
            "fill": "#d0f0c0",
            "stroke": "#000000",
            "color": "#000000"
        },
        "nodes": [
            "fbfd287f6389fa9b",
            "9c593eb8182f2b35",
            "7a6d536ced1c797f",
            "e9e5a34362d10928",
            "f066f8e61ec1308f",
            "fc0164b0a55c73d8",
            "7138c337ef5143f0"
        ],
        "x": 34,
        "y": 1459,
        "w": 1352,
        "h": 82
    },
    {
        "id": "83a42ecb7093007c",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Search index_no & build SQL",
        "func": "// Get data from database\nlet data = msg.payload;\n\n// Recall all data from flow context\nvar index_no = flow.get(\"index_no\");\nvar comp = flow.get(\"comp\");\nvar name = flow.get(\"name\");\nvar email = flow.get(\"email\");\nvar ic = flow.get(\"ic\");\nvar staff_id = flow.get(\"staff_id\");\nvar license_d = flow.get(\"license_d\");\nvar license_b2 = flow.get(\"license_b2\");\nvar phone = flow.get(\"phone\");\nvar password = flow.get(\"password\");\nvar new_uid = flow.get(\"new_uid\");\n\n// Build SQL query\nmsg.topic =\n    \"INSERT INTO `database`(`index_no`, `comp`, `name`, `email`, `ic`, `staff_id`, `license_d`, `license_b2`, `phone`, `uid`, `password`) \" +\n    \"VALUES (\"+index_no+\",'\"+comp+\"','\"+name+\"','\"+email+\"','\"+ic+\"','\"+staff_id+\"',\"+license_d+\",\"+license_b2+\",'\"+phone+\"','\"+new_uid+\"','\"+password+\"')\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "0ba040695f5c0e89"
            ]
        ]
    },
    {
        "id": "04ac2c5ec192a876",
        "type": "ui_form",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "New staff form",
        "label": "",
        "group": "5009149a1ac8863f",
        "order": 1,
        "width": 12,
        "height": 1,
        "options": [
            {
                "label": "Company",
                "value": "comp",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Name",
                "value": "name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "E-Mail",
                "value": "email",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "IC",
                "value": "ic",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Staff ID",
                "value": "staff_id",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Car License",
                "value": "license_d",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Motor License",
                "value": "license_b2",
                "type": "checkbox",
                "required": true,
                "rows": null
            },
            {
                "label": "Phone Number",
                "value": "phone",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "comp": "",
            "name": "",
            "email": "",
            "ic": "",
            "staff_id": "",
            "license_d": false,
            "license_b2": false,
            "phone": "",
            "password": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "payload",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 180,
        "y": 80,
        "wires": [
            [
                "19dcde6414157bf2"
            ]
        ]
    },
    {
        "id": "ff0699e253647a60",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Dummy Muhd",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "QW1234",
        "payloadType": "str",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "6cabb21c944cbf4d"
            ]
        ]
    },
    {
        "id": "6cabb21c944cbf4d",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Save UID to flow.context",
        "func": "// Get registrationInProgress, if not in context flow, set as false\nlet inProgress = flow.get(\"registrationInProgress\") || false;\n\n// But if registrationInProgress is in flow context and its true,\n// then block scanned UID\nif (inProgress) {\n    node.warn(\"Registration in progress. UID rejected.\");\n    return null;\n}\n\n// Else, registrationInProgress is false\n// and scanned UID is stored in flow context\nflow.set(\"new_uid\", msg.payload);\n\n// Set registrationInProgress as true in flow context\n// to block other UID scan\nflow.set(\"registrationInProgress\", true);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 180,
        "wires": [
            [
                "6f4425dd062d113f"
            ]
        ]
    },
    {
        "id": "0ba040695f5c0e89",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Save to database",
        "x": 1050,
        "y": 120,
        "wires": [
            [
                "c34aee0bfb8dd42b"
            ]
        ]
    },
    {
        "id": "c34aee0bfb8dd42b",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Set new_uid to null",
        "func": "// Remove new_uid from flow context\nflow.set(\"new_uid\", null);\n\n// Set registration as not in progress\nflow.set(\"registrationInProgress\", false);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e6b0093e50e08ffe",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Add scanner here",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 120,
        "wires": [
            [
                "6cabb21c944cbf4d"
            ]
        ]
    },
    {
        "id": "fc624bd440cbcd43",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Dummy scan in Muhd",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "QW1234",
        "payloadType": "str",
        "x": 180,
        "y": 340,
        "wires": [
            [
                "a31ef3ec9be8b217"
            ]
        ]
    },
    {
        "id": "a31ef3ec9be8b217",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Record scan in",
        "func": "// Set form active\nflow.set(\"form_enabled\", true);\n\n// Pass data if value isn't empty\nif (msg.payload !== \"\") {\n\n    flow.set(\"uid\", msg.payload);\n\n    const ts_in = Date.now();\n    const dateObject = new Date(ts_in);\n\n    const date_in = dateObject.toLocaleString('en-GB', {\n        day: '2-digit',\n        month: '2-digit',\n        year: 'numeric'\n    }); // Full date and time\n    const time_in = dateObject.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true // Use 24-hour format\n    })\n\n    // Save all below in flow context\n    flow.set(\"ts_in\", ts_in);\n    flow.set(\"date_in\", date_in);\n    flow.set(\"time_in\", time_in);\n\n    msg.payload = {\n        value: msg.payload\n    };\n\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 380,
        "wires": [
            [
                "e97cced72279351d"
            ]
        ]
    },
    {
        "id": "f39a4eebc3301c47",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Read db",
        "func": "msg.topic = \"SELECT * FROM `database` WHERE 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 460,
        "wires": [
            [
                "f3adab6956141cf0"
            ]
        ]
    },
    {
        "id": "f3adab6956141cf0",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read db",
        "x": 620,
        "y": 460,
        "wires": [
            [
                "82e737939a498e33"
            ]
        ]
    },
    {
        "id": "4fdffab18ceef923",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "To display",
        "func": "var name = msg.payload.name;\nvar staff_id = msg.payload.staff_id;\nvar time_in = msg.payload.time_in;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 460,
        "wires": [
            [
                "ce81b0db067a48c4"
            ]
        ]
    },
    {
        "id": "3f7c1f3c6ebb6dc4",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Update attendance",
        "x": 930,
        "y": 560,
        "wires": [
            [
                "aee0786b973dd81e"
            ]
        ]
    },
    {
        "id": "69a2d3c2d7b4db12",
        "type": "comment",
        "z": "6b13ac8835e1a8dd",
        "name": "How to add auto skill-up?",
        "info": "",
        "x": 1630,
        "y": 320,
        "wires": []
    },
    {
        "id": "3e723a63c4336de4",
        "type": "comment",
        "z": "6b13ac8835e1a8dd",
        "name": "Pending key-in actual AF staff info into db",
        "info": "",
        "x": 1560,
        "y": 140,
        "wires": []
    },
    {
        "id": "6cfb32b6ac44195b",
        "type": "ui_text",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "group": "8545d7cb029d3f07",
        "order": 1,
        "width": 8,
        "height": 1,
        "name": "Display name",
        "label": "Name",
        "format": "{{msg.payload.name}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 220,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e702800bd9cff3aa",
        "type": "ui_text",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "group": "8545d7cb029d3f07",
        "order": 2,
        "width": 8,
        "height": 1,
        "name": "Display staff_id",
        "label": "Staff ID",
        "format": "{{msg.payload.staff_id}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 220,
        "y": 1060,
        "wires": []
    },
    {
        "id": "b2be051e9eb366d4",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Save station",
        "func": "flow.set(\"station\", msg.payload);\n\nlet enabled = flow.get(\"form_enabled\") || false;\nif (!enabled) {\n    return null; // discard or notify user\n}\nreturn msg; // allow",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 540,
        "wires": [
            [
                "ad2b16f6636f859a"
            ]
        ]
    },
    {
        "id": "8f8ec9d703e71d94",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Dummy scan in Fathin",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AS1234",
        "payloadType": "str",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "a31ef3ec9be8b217"
            ]
        ]
    },
    {
        "id": "17b0bba30bd8670c",
        "type": "ui_text",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "group": "8545d7cb029d3f07",
        "order": 3,
        "width": 8,
        "height": 1,
        "name": "Display time_in",
        "label": "Time In",
        "format": "{{msg.payload.time_in}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 220,
        "y": 1100,
        "wires": []
    },
    {
        "id": "5d5efbce5c25aa0f",
        "type": "ui_text",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "group": "8545d7cb029d3f07",
        "order": 4,
        "width": 8,
        "height": 1,
        "name": "Display time_out",
        "label": "Time Out",
        "format": "{{msg.payload.time_out}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 230,
        "y": 1140,
        "wires": []
    },
    {
        "id": "fc754e82ce3fc643",
        "type": "delay",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "Delay 3 seconds",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 230,
        "y": 1260,
        "wires": [
            [
                "7795bf2fcce5f5e1",
                "656211924f28a659",
                "e98c5407facc8e18"
            ]
        ]
    },
    {
        "id": "7795bf2fcce5f5e1",
        "type": "change",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "Clear form",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{}",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 430,
        "y": 1220,
        "wires": [
            [
                "92cb811959aeca37"
            ]
        ]
    },
    {
        "id": "92cb811959aeca37",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "fecbf34efaad7d6e"
        ],
        "x": 535,
        "y": 1220,
        "wires": []
    },
    {
        "id": "3fe55a434aad7218",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "link in 2",
        "links": [
            "ce81b0db067a48c4",
            "f333e31bbdeb0771",
            "2096cd7829661f60"
        ],
        "x": 75,
        "y": 1100,
        "wires": [
            [
                "6cfb32b6ac44195b",
                "e702800bd9cff3aa",
                "17b0bba30bd8670c",
                "5d5efbce5c25aa0f",
                "7b4cf30cc6d0320a"
            ]
        ]
    },
    {
        "id": "fecbf34efaad7d6e",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "link in 3",
        "links": [
            "92cb811959aeca37"
        ],
        "x": 75,
        "y": 540,
        "wires": [
            [
                "417fa87ad413272a"
            ]
        ]
    },
    {
        "id": "656211924f28a659",
        "type": "change",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "Clear text",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 1260,
        "wires": [
            [
                "f333e31bbdeb0771"
            ]
        ]
    },
    {
        "id": "f333e31bbdeb0771",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "3fe55a434aad7218",
            "095250e7439768d3"
        ],
        "x": 535,
        "y": 1260,
        "wires": []
    },
    {
        "id": "e98c5407facc8e18",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "Clear all",
        "func": "flow.set(\"form_enabled\", false);\nflow.set(\"uid\", null);\nflow.set(\"ts_in\", null);\nflow.set(\"date_in\", null);\nflow.set(\"time_in\", null);\nflow.set(\"station\", null);\n// optionally clear scanned staff data\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1300,
        "wires": [
            []
        ]
    },
    {
        "id": "db2b95baaaf50a15",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "link in 4",
        "links": [
            "aee0786b973dd81e",
            "2096cd7829661f60"
        ],
        "x": 75,
        "y": 1260,
        "wires": [
            [
                "fc754e82ce3fc643"
            ]
        ]
    },
    {
        "id": "ce81b0db067a48c4",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "3fe55a434aad7218"
        ],
        "x": 1235,
        "y": 460,
        "wires": []
    },
    {
        "id": "43fc31be07c5aeec",
        "type": "ui_text",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "group": "8545d7cb029d3f07",
        "order": 6,
        "width": 8,
        "height": 1,
        "name": "Display station",
        "label": "Station",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 220,
        "y": 1220,
        "wires": []
    },
    {
        "id": "f85193529d10a57b",
        "type": "ui_form",
        "z": "6b13ac8835e1a8dd",
        "name": "Login",
        "label": "",
        "group": "fee3c9684363c400",
        "order": 0,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Staff ID",
                "value": "staff_id",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "text",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "staff_id": "",
            "password": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 1600,
        "wires": [
            [
                "aa4e91eca049a869"
            ]
        ]
    },
    {
        "id": "aa4e91eca049a869",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "name": "Store login credentials",
        "func": "flow.set(\"staff_id\", msg.payload.staff_id);\nflow.set(\"password\", msg.payload.password);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1600,
        "wires": [
            [
                "5f31b41d9183f73c"
            ]
        ]
    },
    {
        "id": "19dcde6414157bf2",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Store new staff info",
        "func": "// Get new_uid from flow context\nlet new_uid = flow.get(\"new_uid\");\n\n// Get registrationInProgress status\n// If not found in flow context, set registration as not in progress\nlet inProgress = flow.get(\"registrationInProgress\") || false;\n\n// Block if no UID was scanned before form submission\nif (!new_uid) {\n    node.warn(\"UID not scanned. Registration blocked.\");\n    return null;\n}\n\n// Store scanned UID and mark registration as in progress\nflow.set(\"registrationInProgress\", true);\n\n// Store form data\nflow.set(\"comp\", msg.payload.comp);\nflow.set(\"name\", msg.payload.name);\nflow.set(\"email\", msg.payload.email);\nflow.set(\"ic\", msg.payload.ic);\nflow.set(\"staff_id\", msg.payload.staff_id);\nflow.set(\"license_d\", msg.payload.license_d);\nflow.set(\"license_b2\", msg.payload.license_b2);\nflow.set(\"phone\", msg.payload.phone);\nflow.set(\"password\", msg.payload.password);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "6c69980c7ed93170"
            ]
        ]
    },
    {
        "id": "4acc66664627aa2c",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read database",
        "x": 580,
        "y": 120,
        "wires": [
            [
                "83a42ecb7093007c"
            ]
        ]
    },
    {
        "id": "13b52024fee46387",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Read table",
        "func": "msg.topic = \"SELECT * FROM `database` WHERE 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 80,
        "wires": [
            [
                "aa0e333476f5151f"
            ]
        ]
    },
    {
        "id": "5f31b41d9183f73c",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "name": "Read table",
        "func": "msg.topic = \"SELECT * FROM `database` WHERE 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1600,
        "wires": [
            [
                "63c44a461e00e595"
            ]
        ]
    },
    {
        "id": "63c44a461e00e595",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read database",
        "x": 620,
        "y": 1600,
        "wires": [
            [
                "692464681d34b510"
            ]
        ]
    },
    {
        "id": "692464681d34b510",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "name": "Check if login credentials match",
        "func": "let data = msg.payload;  // array of user records from the database\nlet staff_id = flow.get(\"staff_id\");  // from earlier function\nlet password = flow.get(\"password\");  // from earlier function\n\nflow.set(\"login_success\", false);  // always reset before checking\n\nfor (let i = 0; i < data.length; i++) {\n    if (data[i].staff_id &&\n        data[i].staff_id.toString().trim() === staff_id.toString().trim() &&\n        data[i].password === password) {\n        \n        flow.set(\"login_success\", true);\n        flow.set(\"user\", data[i]);  // optional: store full user info\n        return msg;\n    }\n}\n\nreturn null;  // login failed",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1600,
        "wires": [
            [
                "574b3d15b8280d5d"
            ]
        ]
    },
    {
        "id": "87f6578831679e68",
        "type": "ui_table",
        "z": "6b13ac8835e1a8dd",
        "name": "",
        "order": 0,
        "width": 0,
        "height": 0,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 250,
        "y": 1720,
        "wires": []
    },
    {
        "id": "574b3d15b8280d5d",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "8a2afa51961ef922"
        ],
        "x": 1015,
        "y": 1600,
        "wires": []
    },
    {
        "id": "8a2afa51961ef922",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "name": "link in 5",
        "links": [
            "574b3d15b8280d5d"
        ],
        "x": 55,
        "y": 1640,
        "wires": [
            [
                "eb95be80df163c0e"
            ]
        ]
    },
    {
        "id": "eeeae14df059c84e",
        "type": "ui_date_picker",
        "z": "6b13ac8835e1a8dd",
        "name": "Select Date",
        "label": "Choose Date",
        "group": "f64ed382e020888c",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 110,
        "y": 1720,
        "wires": [
            []
        ]
    },
    {
        "id": "d8441b5aca8dfcbe",
        "type": "change",
        "z": "6b13ac8835e1a8dd",
        "name": "Set Selected Date",
        "rules": [
            {
                "t": "set",
                "p": "selectedDate",
                "pt": "flow",
                "to": "$moment(payload).format('DD/MM/YYYY')",
                "tot": "jsonata"
            }
        ],
        "x": 130,
        "y": 1680,
        "wires": [
            [
                "27fe197342fea1c8"
            ]
        ]
    },
    {
        "id": "27fe197342fea1c8",
        "type": "file in",
        "z": "6b13ac8835e1a8dd",
        "name": "Read Scan In",
        "filename": "C:/Users/bs010024/OneDrive - Honda/Documents/MSF/New/scanIn.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 320,
        "y": 1680,
        "wires": [
            [
                "273ccc4f6d23c842"
            ]
        ]
    },
    {
        "id": "273ccc4f6d23c842",
        "type": "csv",
        "z": "6b13ac8835e1a8dd",
        "name": "Parse In CSV",
        "sep": ",",
        "hdrin": true,
        "multi": "mult",
        "temp": "",
        "skip": 0,
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 500,
        "y": 1680,
        "wires": [
            [
                "cb43940f1a7507c6"
            ]
        ]
    },
    {
        "id": "cb43940f1a7507c6",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "name": "Store Scan In",
        "func": "flow.set('scanIn', msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 1680,
        "wires": [
            [
                "17b14b2d16c79ad7"
            ]
        ]
    },
    {
        "id": "17b14b2d16c79ad7",
        "type": "file in",
        "z": "6b13ac8835e1a8dd",
        "name": "Read Scan Out",
        "filename": "C:/Users/bs010024/OneDrive - Honda/Documents/MSF/New/scanOut.csv",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 860,
        "y": 1680,
        "wires": [
            [
                "3631e2aa9a6d431a"
            ]
        ]
    },
    {
        "id": "3631e2aa9a6d431a",
        "type": "csv",
        "z": "6b13ac8835e1a8dd",
        "name": "Parse Out CSV",
        "sep": ",",
        "hdrin": true,
        "multi": "mult",
        "temp": "",
        "skip": 0,
        "strings": true,
        "include_empty_strings": false,
        "include_null_values": false,
        "x": 1040,
        "y": 1680,
        "wires": [
            [
                "89ebeeea8ef68526"
            ]
        ]
    },
    {
        "id": "89ebeeea8ef68526",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "name": "Join + Filter + Calculate",
        "func": "let scanIn = flow.get(\"scanIn\");\nlet scanOut = msg.payload;\nconst selectedDate = flow.get(\"selectedDate\");\nconst targetCompany = \"SL Leader Enterprise\";\n\n// Ensure arrays\nif (!Array.isArray(scanIn)) scanIn = [scanIn].filter(Boolean);\nif (!Array.isArray(scanOut)) scanOut = [scanOut].filter(Boolean);\n\nlet results = [];\n\nscanIn.forEach(inRow => {\n    if (\n        inRow[\"Scan Date In\"] !== selectedDate ||\n        inRow[\"Company\"] !== targetCompany\n    ) return;\n\n    const match = scanOut.find(outRow =>\n        outRow[\"QR ID\"] === inRow[\"QR ID\"] &&\n        outRow[\"Scan Date Out\"] === selectedDate\n    );\n\n    const inTime = parseInt(inRow[\"Scan Timestamp In\"]);\n    const outTime = match ? parseInt(match[\"Scan Timestamp Out\"]) : null;\n\n    const duration = outTime ? ((outTime - inTime) / (1000 * 60 * 60)).toFixed(2) : \"0.00\";\n\n    results.push({\n        Name: inRow[\"Full Name\"],\n        Company: inRow[\"Company\"],\n        Date: selectedDate,\n        TimeIn: inRow[\"Scan Time In\"],\n        TimeOut: match ? match[\"Scan Time Out\"] : \"N/A\",\n        Hours: duration\n    });\n});\n\nmsg.payload = results;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 1680,
        "wires": [
            [
                "b2866fa216d0e48f"
            ]
        ]
    },
    {
        "id": "b2866fa216d0e48f",
        "type": "ui_table",
        "z": "6b13ac8835e1a8dd",
        "group": "f64ed382e020888c",
        "name": "Attendance Table",
        "order": 6,
        "width": 24,
        "height": 8,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1470,
        "y": 1680,
        "wires": []
    },
    {
        "id": "eb95be80df163c0e",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "name": "Switch Tab Based on Role",
        "func": "let user = flow.get(\"user\");\n\nif (!user || !user.role) {\n    node.warn(\"User role not set\");\n    return null;\n}\n\nlet target_tab = \"\";\n\nif (user.role === \"admin\") {\n    target_tab = \"admin_tab\"; // must match the tab name exactly\n} else {\n    target_tab = \"user_tab\";  // must match the tab name exactly\n}\n\nreturn {\n    payload: {\n        tab: target_tab\n    }\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1640,
        "wires": [
            [
                "b4b47392b7f48e2c"
            ]
        ]
    },
    {
        "id": "b4b47392b7f48e2c",
        "type": "ui_ui_control",
        "z": "6b13ac8835e1a8dd",
        "name": "Switch Tab",
        "events": [],
        "x": 410,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "6c69980c7ed93170",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Get max index_no",
        "func": "msg.topic = \"SELECT MAX(index_no) AS max_index FROM `database`\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 80,
        "wires": [
            [
                "555074e764b58a85"
            ]
        ]
    },
    {
        "id": "555074e764b58a85",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read database",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "9b76d02f56668318"
            ]
        ]
    },
    {
        "id": "9b76d02f56668318",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Store index_no",
        "func": "let maxIndex = msg.payload[0].max_index || 0;\nlet index_no = maxIndex + 1;\n\nflow.set(\"index_no\", index_no);\nmsg.payload = index_no;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 80,
        "wires": [
            [
                "13b52024fee46387"
            ]
        ]
    },
    {
        "id": "8568d761288ec384",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "link in 6",
        "links": [
            "aa0e333476f5151f"
        ],
        "x": 445,
        "y": 120,
        "wires": [
            [
                "4acc66664627aa2c"
            ]
        ]
    },
    {
        "id": "aa0e333476f5151f",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "8568d761288ec384"
        ],
        "x": 1335,
        "y": 80,
        "wires": []
    },
    {
        "id": "7b4cf30cc6d0320a",
        "type": "ui_text",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "group": "8545d7cb029d3f07",
        "order": 5,
        "width": 8,
        "height": 1,
        "name": "Display total_worktime",
        "label": "Total Worktime",
        "format": "{{msg.payload.total_worktime}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 240,
        "y": 1180,
        "wires": []
    },
    {
        "id": "e9afb809165cfdf6",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Dummy Fathin",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "AS1234",
        "payloadType": "str",
        "x": 180,
        "y": 200,
        "wires": [
            [
                "6cabb21c944cbf4d"
            ]
        ]
    },
    {
        "id": "010020511b6c1b15",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "Dummy Syakir",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ZX1234",
        "payloadType": "str",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "6cabb21c944cbf4d"
            ]
        ]
    },
    {
        "id": "aed6ae56c8608f6c",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Dummy scan in Syakir",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ZX1234",
        "payloadType": "str",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "a31ef3ec9be8b217"
            ]
        ]
    },
    {
        "id": "82e737939a498e33",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Search for uid in db",
        "func": "// Set data from database as data\nlet data = msg.payload;\n\n// Set status to find as false first\nlet found = false;\n\n// Recall all related data from flow context\nlet uid = flow.get(\"uid\");\nlet index_no = flow.get(\"scan_index_no\");\nlet date_in = flow.get(\"date_in\");\nlet time_in = flow.get(\"time_in\");\nlet ts_in = flow.get(\"ts_in\");\n\nfor (let i = 0; i < data.length; i++) {\n    if (data[i].uid &&\n        data[i].uid.toString().trim() === uid.toString().trim()) {\n        msg.payload = {\n            index_no: index_no,\n            comp: data[i].comp,\n            name: data[i].name,\n            staff_id: data[i].staff_id,\n            uid: uid,\n            date_in: date_in,\n            time_in: time_in,\n            ts_in: ts_in,\n            completeRecord: true\n        };\n        found = true;\n        return [msg, null];\n    }\n}\n\nif (!found) {\n    // Clear variables\n    flow.set(\"uid\", null);\n    flow.set(\"index_no\", null);\n    flow.set(\"date_in\", null);\n    flow.set(\"time_in\", null);\n    flow.set(\"ts_in\", null);\n    flow.set(\"date_out\", null);\n    flow.set(\"time_out\", null);\n    flow.set(\"ts_out\", null);\n    msg.topic = `INSERT INTO system_log (timestamp, action_type, uid, message) VALUES (NOW(), 'ScanIn', '${uid}', 'UID not found in staff database')`;\n    return [null, msg];\n}",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 460,
        "wires": [
            [
                "4fdffab18ceef923",
                "bc47b8b4c3f695f3"
            ],
            [
                "39cb7b0107ea1e2a"
            ]
        ]
    },
    {
        "id": "e97cced72279351d",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Read attendance",
        "func": "msg.topic = \"SELECT * FROM attendance ORDER BY ts_in ASC\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "79dae5bb959e0fcf"
            ]
        ]
    },
    {
        "id": "79dae5bb959e0fcf",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read attendance",
        "x": 930,
        "y": 380,
        "wires": [
            [
                "b1cebc246c0a75fa"
            ]
        ]
    },
    {
        "id": "b1cebc246c0a75fa",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Search for latest index_no",
        "func": "// Assumes msg.payload is an array from the database\nlet data = msg.payload;\n\n// Get last row\nlet last = data[data.length - 1];\nlet last_index = 0;\n\n// Checks if last exists and has an index_no field.\n// If it does, last_index is set to that value.\nif (last && last.index_no !== undefined && last.index_no !== null) {\n    last_index = last.index_no;\n}\n\n// Store next index_no in flow context\nlet next_index = last_index + 1;\nflow.set(\"scan_index_no\", next_index);\n\nmsg.payload = null;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 380,
        "wires": [
            [
                "9547209e3c1c317e"
            ]
        ]
    },
    {
        "id": "9547209e3c1c317e",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "8d0934fbda507848"
        ],
        "x": 1315,
        "y": 380,
        "wires": []
    },
    {
        "id": "8d0934fbda507848",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "link in 7",
        "links": [
            "9547209e3c1c317e"
        ],
        "x": 345,
        "y": 460,
        "wires": [
            [
                "f39a4eebc3301c47"
            ]
        ]
    },
    {
        "id": "inject_fathin",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Dummy scan out Muhd",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "QW1234",
        "payloadType": "str",
        "x": 180,
        "y": 660,
        "wires": [
            [
                "fn_record_ts_out"
            ]
        ]
    },
    {
        "id": "fn_record_ts_out",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Record date_out, time_out, ts_out",
        "func": "// Save uid in flow context\nflow.set(\"uid\", msg.payload);\n\n// Get current time\nconst ts_out = Date.now();\nconst dateObj = new Date(ts_out);\n\n// Save scan out details in flow context\nflow.set(\"ts_out\", ts_out);\nflow.set(\"date_out\", dateObj.toLocaleDateString('en-GB'));\nflow.set(\"time_out\", dateObj.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', hour12: true }));\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 700,
        "wires": [
            [
                "fn_read_staff_db"
            ]
        ]
    },
    {
        "id": "fn_read_staff_db",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Read db",
        "func": "msg.topic = \"SELECT * FROM `database`\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 700,
        "wires": [
            [
                "mysql_read_staff"
            ]
        ]
    },
    {
        "id": "mysql_read_staff",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read db",
        "x": 900,
        "y": 700,
        "wires": [
            [
                "fn_verify_uid"
            ]
        ]
    },
    {
        "id": "fn_verify_uid",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Verify UID",
        "func": "// Recall uid from flow context\nconst uid = flow.get(\"uid\");\n\n// Let database as data\nconst data = msg.payload;\n\n// Find uid in database\nif (data.find(row => row.uid === uid)) {\n  // If found, search for ts_in\n  return [msg, null];\n} else {\n  // If not found, log in system log\n  msg.topic = `INSERT INTO system_log (timestamp, action_type, uid, message) VALUES (NOW(), 'ScanOut', '${uid}', 'UID not found in staff database')`;\n  return [null, msg];\n}",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 700,
        "wires": [
            [
                "c1459a3a31e4c977"
            ],
            [
                "96f3339a44ed79a8"
            ]
        ]
    },
    {
        "id": "fn_find_latest_scanin",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Find scan_in within 24h",
        "func": "// Get UID from flow context\nconst uid = flow.get(\"uid\");\nconst ts_out = flow.get(\"ts_out\");\n\n// Calculate timestamp for 24 hours ago\nconst ts_24h_ago = ts_out - (24 * 60 * 60 * 1000);\n\n// Build SQL to find the latest scan_in within 24h\nmsg.topic = `\n    SELECT *\n    FROM attendance\n    WHERE uid = '${uid}'\n      AND ts_in >= ${ts_24h_ago}\n      AND ts_in <= ${ts_out}\n      AND (ts_out IS NULL OR ts_out = '')\n    ORDER BY ts_in DESC\n    LIMIT 1\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 780,
        "wires": [
            [
                "mysql_find_latest_scanin"
            ]
        ]
    },
    {
        "id": "mysql_find_latest_scanin",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Find scan_in",
        "x": 430,
        "y": 780,
        "wires": [
            [
                "fn_store_latest_match"
            ]
        ]
    },
    {
        "id": "fn_store_latest_match",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Store match",
        "func": "const match = msg.payload[0];\nif (!match) return null;\nflow.set(\"latestMatch\", match);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 780,
        "wires": [
            [
                "fn_update_scanout"
            ]
        ]
    },
    {
        "id": "fn_update_scanout",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Update scan_in row with scan_out",
        "func": "const ts_out = flow.get(\"ts_out\");\nconst time_out = flow.get(\"time_out\");\nconst date_out = flow.get(\"date_out\");\nconst match = flow.get(\"latestMatch\");\n\nconst index_no = match.index_no;\nflow.set(\"match.index_no\", index_no);\nconst ts_in = Number(match.ts_in);\n\nconst totalMinutes = Math.floor((ts_out - ts_in) / 60000);\nconst hours = Math.floor(totalMinutes / 60);\nconst minutes = totalMinutes % 60;\n\nconst total_worktime = `${hours}h ${minutes}m`;\n\nmsg.topic = `UPDATE attendance \n             SET date_out='${date_out}', \n                 time_out='${time_out}', \n                 ts_out=${ts_out}, \n                 total_worktime='${total_worktime}' \n             WHERE index_no=${index_no}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 780,
        "wires": [
            [
                "mysql_update_scanout"
            ]
        ]
    },
    {
        "id": "mysql_update_scanout",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Update attendance",
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "4cef8fa9c205a652",
                "df43b3800daa7956"
            ]
        ]
    },
    {
        "id": "fn_log_success",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Log Success",
        "func": "const uid = flow.get(\"uid\");\nconst match = flow.get(\"latestMatch\");\n\nmsg.topic = `INSERT INTO system_log \n             (timestamp, action_type, uid, message) \n             VALUES (NOW(), 'ScanOut', '${uid}', 'Updated scan-out for index_no ${match.index_no}')`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 880,
        "wires": [
            [
                "mysql_log_action"
            ]
        ]
    },
    {
        "id": "mysql_log_action",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Log to db",
        "x": 900,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "c1459a3a31e4c977",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "eb535990dfb7bb1a"
        ],
        "x": 1135,
        "y": 680,
        "wires": []
    },
    {
        "id": "eb535990dfb7bb1a",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link in 10",
        "links": [
            "c1459a3a31e4c977"
        ],
        "x": 75,
        "y": 780,
        "wires": [
            [
                "fn_find_latest_scanin"
            ]
        ]
    },
    {
        "id": "96f3339a44ed79a8",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "9d15662afb868cf8"
        ],
        "x": 1135,
        "y": 720,
        "wires": []
    },
    {
        "id": "9d15662afb868cf8",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link in 11",
        "links": [
            "96f3339a44ed79a8"
        ],
        "x": 805,
        "y": 920,
        "wires": [
            [
                "mysql_log_action"
            ]
        ]
    },
    {
        "id": "453940467f4285fa",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Dummy scan out Fathin",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "AS1234",
        "payloadType": "str",
        "x": 180,
        "y": 700,
        "wires": [
            [
                "fn_record_ts_out"
            ]
        ]
    },
    {
        "id": "c46e44161c9e2122",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Dummy scan out Syakir",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "ZX1234",
        "payloadType": "str",
        "x": 180,
        "y": 740,
        "wires": [
            [
                "fn_record_ts_out"
            ]
        ]
    },
    {
        "id": "417fa87ad413272a",
        "type": "ui_dropdown",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Select station",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "8545d7cb029d3f07",
        "order": 7,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Trim",
                "value": "Trim",
                "type": "str"
            },
            {
                "label": "Chassis",
                "value": "Chassis",
                "type": "str"
            },
            {
                "label": "Final",
                "value": "Final",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 200,
        "y": 540,
        "wires": [
            [
                "b2be051e9eb366d4"
            ]
        ]
    },
    {
        "id": "7f6fe61fb4b66c39",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "095250e7439768d3"
        ],
        "x": 855,
        "y": 520,
        "wires": []
    },
    {
        "id": "095250e7439768d3",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "9134ff1e8f4df087",
        "name": "link in 12",
        "links": [
            "7f6fe61fb4b66c39",
            "f333e31bbdeb0771",
            "937245df9628f493"
        ],
        "x": 75,
        "y": 1220,
        "wires": [
            [
                "43fc31be07c5aeec"
            ]
        ]
    },
    {
        "id": "ad2b16f6636f859a",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Update station in attendance",
        "func": "// Get the station and index number from flow context\nlet station = flow.get(\"station\");\nlet index_no = flow.get(\"scan_index_no\");\n\n// --- Output 1: Send station to display ---\nlet displayMsg = {\n    payload: station\n};\n\n// --- Output 2: Update database ---\nlet dbMsg = {\n    topic: `UPDATE attendance \n            SET station = '${station}'\n            WHERE index_no = ${index_no}`\n};\n\n// Return both outputs: \n// Output 1 → Display station node\n// Output 2 → MySQL update node\nreturn [displayMsg, dbMsg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 540,
        "wires": [
            [
                "7f6fe61fb4b66c39"
            ],
            [
                "3f7c1f3c6ebb6dc4"
            ]
        ]
    },
    {
        "id": "aab87556ee8c9a1d",
        "type": "ui_text",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "group": "5009149a1ac8863f",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Display new_uid",
        "label": "New UID",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 860,
        "y": 180,
        "wires": []
    },
    {
        "id": "6f4425dd062d113f",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "1845049c0e0b030c",
        "name": "To display new_uid",
        "func": "// Recall new_uid as msg.payload\nmsg.payload = flow.get(\"new_uid\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 180,
        "wires": [
            [
                "aab87556ee8c9a1d"
            ]
        ]
    },
    {
        "id": "04cf14c8024bf4cb",
        "type": "comment",
        "z": "6b13ac8835e1a8dd",
        "name": "Done review but not tested yet",
        "info": "",
        "x": 1520,
        "y": 60,
        "wires": []
    },
    {
        "id": "8f953490ec74f020",
        "type": "comment",
        "z": "6b13ac8835e1a8dd",
        "name": "Need to revise form to meet respective columns",
        "info": "",
        "x": 1580,
        "y": 100,
        "wires": []
    },
    {
        "id": "aee0786b973dd81e",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "db2b95baaaf50a15"
        ],
        "x": 1075,
        "y": 540,
        "wires": []
    },
    {
        "id": "235232c7ff124104",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "To display",
        "func": "var data = msg.payload[0]; // first row from SELECT\nif (!data) return null; // no row found\n\nlet display_all = {\n    name: data.name,\n    staff_id: data.staff_id,\n    time_in: data.time_in,\n    time_out: data.time_out,\n    total_worktime: data.total_worktime\n};\n\nlet display_station = data.station;\nflow.set(\"station_calc\", data.station);\n\nlet msg1 = { payload: display_all };\nlet msg2 = { payload: display_station };\n\nreturn [msg1, msg2];",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 840,
        "wires": [
            [
                "2096cd7829661f60"
            ],
            [
                "937245df9628f493"
            ]
        ]
    },
    {
        "id": "2096cd7829661f60",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "3fe55a434aad7218",
            "db2b95baaaf50a15"
        ],
        "x": 855,
        "y": 820,
        "wires": []
    },
    {
        "id": "39cb7b0107ea1e2a",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "To system log",
        "x": 1140,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "bc47b8b4c3f695f3",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Write scan in",
        "func": "// Get msg.payload data\nvar index_no = msg.payload.index_no;\nvar comp = msg.payload.comp;\nvar name = msg.payload.name;\nvar staff_id = msg.payload.staff_id;\nvar station = null;\nvar uid = msg.payload.uid;\nvar date_in = msg.payload.date_in;\nvar time_in = msg.payload.time_in;\nvar ts_in = msg.payload.ts_in;\nvar date_out = null;\nvar time_out = null;\nvar ts_out = null;\nvar total_worktime = null;\n\nmsg.topic =\n    \"INSERT INTO `attendance`(`index_no`, `comp`, `name`, `staff_id`, `station`, `uid`, `date_in`, `time_in`, `ts_in`, `date_out`, `time_out`, `ts_out`,`total_worktime`) \" +\n    \"VALUES (\"+index_no+\",'\"+comp+\"','\"+name+\"','\"+staff_id+\"','\"+station+\"','\"+uid+\"','\"+date_in+\"','\"+time_in+\"',\"+ts_in+\",'\"+date_out+\"','\"+time_out+\"',\"+ts_out+\",'\"+total_worktime+\"')\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 420,
        "wires": [
            [
                "86eece8e450ff7a2",
                "5e9b60de4712f285"
            ]
        ]
    },
    {
        "id": "86eece8e450ff7a2",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Insert attendance",
        "x": 1390,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "4cef8fa9c205a652",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "d7dad9b7b37f5ed8"
        ],
        "x": 1195,
        "y": 760,
        "wires": []
    },
    {
        "id": "d7dad9b7b37f5ed8",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link in 1",
        "links": [
            "4cef8fa9c205a652"
        ],
        "x": 75,
        "y": 860,
        "wires": [
            [
                "f6ecf9d705c46b22"
            ]
        ]
    },
    {
        "id": "f6890b555e13af2d",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read attendance",
        "x": 450,
        "y": 860,
        "wires": [
            [
                "235232c7ff124104",
                "fn_log_success"
            ]
        ]
    },
    {
        "id": "f6ecf9d705c46b22",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "Read attendance",
        "func": "let match = flow.get(\"match\");\nlet index_no = match.index_no;\n\nmsg.topic = `SELECT * FROM attendance WHERE index_no = ${index_no}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 860,
        "wires": [
            [
                "f6890b555e13af2d"
            ]
        ]
    },
    {
        "id": "5e9b60de4712f285",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "Log Success",
        "func": "const uid = flow.get(\"uid\");\nconst index_no = flow.get(\"scan_index_no\");\n\nmsg.topic = `INSERT INTO system_log \n             (timestamp, action_type, uid, message) \n             VALUES (NOW(), 'ScanIn', '${uid}', 'Updated scan-in for index_no ${index_no}')`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 420,
        "wires": [
            [
                "1be7d8ac50623006"
            ]
        ]
    },
    {
        "id": "9cafcdfd3e28ba81",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "link in 8",
        "links": [
            "1be7d8ac50623006"
        ],
        "x": 1005,
        "y": 500,
        "wires": [
            [
                "39cb7b0107ea1e2a"
            ]
        ]
    },
    {
        "id": "1be7d8ac50623006",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "8b744031c4387e1c",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "9cafcdfd3e28ba81"
        ],
        "x": 1465,
        "y": 420,
        "wires": []
    },
    {
        "id": "937245df9628f493",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "095250e7439768d3"
        ],
        "x": 855,
        "y": 860,
        "wires": []
    },
    {
        "id": "df43b3800daa7956",
        "type": "link out",
        "z": "6b13ac8835e1a8dd",
        "g": "scanout_group",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "91db8e4739f7fa51",
            "15b17e5f4c772308"
        ],
        "x": 1195,
        "y": 800,
        "wires": []
    },
    {
        "id": "trigger_attendance",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "name": "Inject",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 1420,
        "wires": [
            [
                "get_attendance"
            ]
        ]
    },
    {
        "id": "get_attendance",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "name": "Get Latest Attendance",
        "func": "// Get UID and Station (fallbacks only for testing)\nconst uid = flow.get(\"uid\") || 'AS1234';\nconst station = flow.get(\"station\") || 'Trim';\n\n// Build query: compute minutes safely from epoch ints\nmsg.topic = `\nSELECT\n  staff_id,\n  station,\n  ts_in,\n  ts_out,\n  TIMESTAMPDIFF(\n    MINUTE,\n    FROM_UNIXTIME(CASE WHEN ts_in  > 9999999999 THEN ts_in / 1000 ELSE ts_in END),\n    FROM_UNIXTIME(CASE WHEN ts_out > 9999999999 THEN ts_out / 1000 ELSE ts_out END)\n  ) AS work_minutes\nFROM attendance\nWHERE uid='${uid}'\n  AND station='${station}'\n  AND ts_in  IS NOT NULL\n  AND ts_out IS NOT NULL\n  AND ts_out > ts_in\nORDER BY ts_out DESC\nLIMIT 1`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1400,
        "wires": [
            [
                "39d341013f3d716c"
            ]
        ]
    },
    {
        "id": "prepare_skill_update",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "name": "Prepare Skill Update",
        "func": "if (!msg.payload || msg.payload.length === 0) return null;\n\nconst row = msg.payload[0];\nconst staff_id = row.staff_id;\nconst station = row.station;\n\n// minutes → hours (2 decimals). toFixed returns string; wrap with Number(...)\nconst minutes = Number(row.work_minutes);\nif (!Number.isFinite(minutes) || minutes <= 0) {\n    node.warn(\"Invalid work_hours (minutes was null/NaN/<=0). Skipping update.\");\n    return null;\n}\nconst work_hours = Number((minutes / 60).toFixed(2));\n\n// Build UPSERT with level computed from cumulative hours\nmsg.topic = `\nINSERT INTO skills (staff_id, station, level, work_hours, last_updated)\nVALUES ('${staff_id}', '${station}', 1, ${work_hours}, NOW())\nON DUPLICATE KEY UPDATE\n  work_hours   = work_hours + ${work_hours},\n  last_updated = NOW(),\n  level = CASE\n             WHEN work_hours + ${work_hours} >= 32 THEN 4\n             WHEN work_hours + ${work_hours} >= 24 THEN 3\n             WHEN work_hours + ${work_hours} >= 16 THEN 2\n             ELSE 1\n          END;\n`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1400,
        "wires": [
            [
                "044196d3841a44d5"
            ]
        ]
    },
    {
        "id": "39d341013f3d716c",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read attendance",
        "x": 500,
        "y": 1400,
        "wires": [
            [
                "prepare_skill_update"
            ]
        ]
    },
    {
        "id": "044196d3841a44d5",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read skills",
        "x": 900,
        "y": 1400,
        "wires": [
            [
                "f58d5b050802c56f"
            ]
        ]
    },
    {
        "id": "f58d5b050802c56f",
        "type": "debug",
        "z": "6b13ac8835e1a8dd",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 1400,
        "wires": []
    },
    {
        "id": "15b17e5f4c772308",
        "type": "link in",
        "z": "6b13ac8835e1a8dd",
        "name": "link in 9",
        "links": [
            "df43b3800daa7956"
        ],
        "x": 155,
        "y": 1380,
        "wires": [
            [
                "get_attendance"
            ]
        ]
    },
    {
        "id": "fbfd287f6389fa9b",
        "type": "inject",
        "z": "6b13ac8835e1a8dd",
        "g": "094a935373be984b",
        "name": "Test UID",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "AS1234",
        "payloadType": "str",
        "x": 140,
        "y": 1500,
        "wires": [
            [
                "9c593eb8182f2b35"
            ]
        ]
    },
    {
        "id": "9c593eb8182f2b35",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "094a935373be984b",
        "name": "Get Latest Attendance",
        "func": "// Recall UID and Station from flow\nconst uid = flow.get(\"uid\") || msg.payload;\nconst station = flow.get(\"station\") || 'Trim';\n\nmsg.topic = `SELECT staff_id, station, ts_in, ts_out,\n  TIMESTAMPDIFF(\n    MINUTE,\n    FROM_UNIXTIME(CASE WHEN ts_in > 9999999999 THEN ts_in / 1000 ELSE ts_in END),\n    FROM_UNIXTIME(CASE WHEN ts_out > 9999999999 THEN ts_out / 1000 ELSE ts_out END)\n  ) AS work_minutes\nFROM attendance\nWHERE uid='${uid}'\nAND station='${station}'\nAND ts_in IS NOT NULL\nAND ts_out IS NOT NULL\nAND ts_out > ts_in\nORDER BY ts_out DESC\nLIMIT 1;`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1500,
        "wires": [
            [
                "7a6d536ced1c797f"
            ]
        ]
    },
    {
        "id": "7a6d536ced1c797f",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "094a935373be984b",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Read Attendance",
        "x": 530,
        "y": 1500,
        "wires": [
            [
                "e9e5a34362d10928"
            ]
        ]
    },
    {
        "id": "e9e5a34362d10928",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "094a935373be984b",
        "name": "Prepare Skill Update",
        "func": "// Extract latest attendance row\nif (!msg.payload || msg.payload.length === 0) return null;\nconst row = msg.payload[0];\nconst minutes = Number(row.work_minutes);\nif (!Number.isFinite(minutes) || minutes <= 0) {\n    node.warn(`Invalid work_hours for UID ${row.staff_id}. Skipping update.`);\n    return null;\n}\n\n// Read current skill record from flow or SQL (assume flow)\nconst currentSkill = flow.get(`skill_${row.staff_id}_${row.station}`) || {level:1, work_hours:0};\n\nlet newWorkHours = currentSkill.work_hours + minutes / 60;\nlet newLevel = currentSkill.level;\nif (newWorkHours >= 8 && currentSkill.level < 4) {\n    newLevel += 1;\n    newWorkHours = 0; // reset hours for next level\n}\n\n// Update flow context\nflow.set(`skill_${row.staff_id}_${row.station}`, {level:newLevel, work_hours:newWorkHours});\n\nmsg.topic = `INSERT INTO skills (staff_id, station, level, work_hours, last_updated)\n  VALUES ('${row.staff_id}','${row.station}',${newLevel},${newWorkHours},NOW())\n  ON DUPLICATE KEY UPDATE level=${newLevel}, work_hours=${newWorkHours}, last_updated=NOW();`;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1500,
        "wires": [
            [
                "f066f8e61ec1308f"
            ]
        ]
    },
    {
        "id": "f066f8e61ec1308f",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "094a935373be984b",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Update Skills Table",
        "x": 950,
        "y": 1500,
        "wires": [
            [
                "fc0164b0a55c73d8"
            ]
        ]
    },
    {
        "id": "fc0164b0a55c73d8",
        "type": "function",
        "z": "6b13ac8835e1a8dd",
        "g": "094a935373be984b",
        "name": "Log Skill Update",
        "func": "const row = flow.get(`skill_${flow.get('uid') || 'AS1234'}_Trim`);\nmsg.topic = `INSERT INTO system_log (timestamp, action_type, uid, message) VALUES (NOW(),'SkillUpdate','${flow.get('uid') || 'AS1234'}','Updated skill for station Trim to level ${row.level}, work_hours ${row.work_hours}')`;\nreturn msg;",
        "outputs": 1,
        "x": 1140,
        "y": 1500,
        "wires": [
            [
                "7138c337ef5143f0"
            ]
        ]
    },
    {
        "id": "7138c337ef5143f0",
        "type": "mysql",
        "z": "6b13ac8835e1a8dd",
        "g": "094a935373be984b",
        "mydb": "e4ad07fd5ca8d88c",
        "name": "Log to DB",
        "x": 1300,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "5009149a1ac8863f",
        "type": "ui_group",
        "name": "registration",
        "tab": "931bfd0b3f6dfbe5",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false,
        "className": ""
    },
    {
        "id": "e4ad07fd5ca8d88c",
        "type": "MySQLdatabase",
        "z": "6b13ac8835e1a8dd",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "smart_attendance",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "8545d7cb029d3f07",
        "type": "ui_group",
        "name": "scan",
        "tab": "0c63fc0bc808fbc8",
        "order": 1,
        "disp": false,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "fee3c9684363c400",
        "type": "ui_group",
        "name": "Login",
        "tab": "417a52366c03fe4b",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "f64ed382e020888c",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "9464ffe50a25767b",
        "order": 1,
        "disp": false,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "931bfd0b3f6dfbe5",
        "type": "ui_tab",
        "name": "registration",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "0c63fc0bc808fbc8",
        "type": "ui_tab",
        "name": "scan",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "417a52366c03fe4b",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 6,
        "disabled": true,
        "hidden": true
    },
    {
        "id": "9464ffe50a25767b",
        "type": "ui_tab",
        "name": "[Admin] SL Leader Enterprise",
        "icon": "public",
        "order": 14,
        "disabled": true,
        "hidden": true
    }
]
